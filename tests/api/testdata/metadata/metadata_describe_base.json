{
    "module": "autograder.api.metadata.describe",
    "arguments": {
        "force-compute": false
    },
    "output": {
        "endpoints": {
            "courses/admin/email": {
                "description": "Send an email to course users.",
                "input": [
                    {
                        "name": "bcc",
                        "type": "[]model.CourseUserReference"
                    },
                    {
                        "name": "body",
                        "type": "string"
                    },
                    {
                        "name": "cc",
                        "type": "[]model.CourseUserReference"
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "dry-run",
                        "type": "bool"
                    },
                    {
                        "name": "html",
                        "type": "bool"
                    },
                    {
                        "name": "subject",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "to",
                        "type": "[]model.CourseUserReference"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "bcc",
                        "type": "[]string"
                    },
                    {
                        "name": "cc",
                        "type": "[]string"
                    },
                    {
                        "name": "to",
                        "type": "[]string"
                    }
                ]
            },
            "courses/admin/update": {
                "description": "Update an existing course.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "result",
                        "type": "*courses.CourseUpsertResult"
                    }
                ]
            },
            "courses/assignments/get": {
                "description": "Get the information for a course assignment.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "assignment",
                        "type": "*core.AssignmentInfo"
                    }
                ]
            },
            "courses/assignments/list": {
                "description": "List the assignments in the course.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "assignments",
                        "type": "[]*core.AssignmentInfo"
                    }
                ]
            },
            "courses/assignments/submissions/analysis/individual": {
                "description": "Get the result of a individual analysis for the specified submissions.",
                "input": [
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Don't save anything."
                    },
                    {
                        "name": "overwrite-records",
                        "type": "bool",
                        "description": "Remove any existing records before running the job."
                    },
                    {
                        "name": "submissions",
                        "type": "[]string",
                        "description": "The raw submission specifications to analyze.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "wait-for-completion",
                        "type": "bool",
                        "description": "Wait for the entire job to complete and return all results."
                    }
                ],
                "output": [
                    {
                        "name": "complete",
                        "type": "bool"
                    },
                    {
                        "name": "options",
                        "type": "analysis.AnalysisOptions"
                    },
                    {
                        "name": "results",
                        "type": "map[string]*model.IndividualAnalysis"
                    },
                    {
                        "name": "summary",
                        "type": "*model.IndividualAnalysisSummary"
                    },
                    {
                        "name": "work-errors",
                        "type": "map[string]string"
                    }
                ]
            },
            "courses/assignments/submissions/analysis/pairwise": {
                "description": "Get the result of a pairwise analysis for the specified submissions.",
                "input": [
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Don't save anything."
                    },
                    {
                        "name": "overwrite-records",
                        "type": "bool",
                        "description": "Remove any existing records before running the job."
                    },
                    {
                        "name": "submissions",
                        "type": "[]string",
                        "description": "The raw submission specifications to analyze.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "wait-for-completion",
                        "type": "bool",
                        "description": "Wait for the entire job to complete and return all results."
                    }
                ],
                "output": [
                    {
                        "name": "complete",
                        "type": "bool"
                    },
                    {
                        "name": "options",
                        "type": "analysis.AnalysisOptions"
                    },
                    {
                        "name": "results",
                        "type": "map[model.PairwiseKey]*model.PairwiseAnalysis"
                    },
                    {
                        "name": "summary",
                        "type": "*model.PairwiseAnalysisSummary"
                    },
                    {
                        "name": "work-errors",
                        "type": "map[string]string"
                    }
                ]
            },
            "courses/assignments/submissions/fetch/course/attempts": {
                "description": "Get all recent submissions and grading information for this assignment.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-users",
                        "type": "[]model.CourseUserReference",
                        "description": "If not empty, filter results to matching users."
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "grading-results",
                        "type": "map[string]*model.GradingResult"
                    }
                ]
            },
            "courses/assignments/submissions/fetch/course/scores": {
                "description": "Get a summary of the most recent scores for this assignment.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-users",
                        "type": "[]model.CourseUserReference",
                        "description": "If not empty, filter results to matching users."
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "submission-infos",
                        "type": "map[string]*model.SubmissionHistoryItem"
                    }
                ]
            },
            "courses/assignments/submissions/fetch/user/attempt": {
                "description": "Get a submission along with all grading information.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUserSelfOrGrader"
                    },
                    {
                        "name": "target-submission",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-submission",
                        "type": "bool"
                    },
                    {
                        "name": "found-user",
                        "type": "bool"
                    },
                    {
                        "name": "grading-result",
                        "type": "*model.GradingResult"
                    }
                ]
            },
            "courses/assignments/submissions/fetch/user/attempts": {
                "description": "Get all submission attempts made by a user along with all grading information.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUserSelfOrGrader"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-user",
                        "type": "bool"
                    },
                    {
                        "name": "grading-results",
                        "type": "[]*model.GradingResult"
                    }
                ]
            },
            "courses/assignments/submissions/fetch/user/history": {
                "description": "Get a summary of the submissions for this assignment.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUserSelfOrGrader"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-user",
                        "type": "bool"
                    },
                    {
                        "name": "history",
                        "type": "[]*model.SubmissionHistoryItem"
                    }
                ]
            },
            "courses/assignments/submissions/fetch/user/peek": {
                "description": "Get a copy of the grading report for the specified submission. Does not submit a new submission.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUserSelfOrGrader"
                    },
                    {
                        "name": "target-submission",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-submission",
                        "type": "bool"
                    },
                    {
                        "name": "found-user",
                        "type": "bool"
                    },
                    {
                        "name": "submission-result",
                        "type": "*model.GradingInfo"
                    }
                ]
            },
            "courses/assignments/submissions/proxy/regrade": {
                "description": "Proxy regrade an assignment for all target users using their most recent submission.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Don't save anything."
                    },
                    {
                        "name": "overwrite-records",
                        "type": "bool",
                        "description": "Remove any existing records before running the job."
                    },
                    {
                        "name": "regrade-cutoff",
                        "type": "int64",
                        "description": "Ensure every user has made a new submission after this time.\nIf nil, the current time will be used."
                    },
                    {
                        "name": "target-users",
                        "type": "[]model.CourseUserReference",
                        "description": "The raw course user references to regrade.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "wait-for-completion",
                        "type": "bool",
                        "description": "Wait for the entire job to complete and return all results."
                    }
                ],
                "output": [
                    {
                        "name": "complete",
                        "type": "bool"
                    },
                    {
                        "name": "options",
                        "type": "grader.RegradeOptions"
                    },
                    {
                        "name": "resolved-users",
                        "type": "[]string"
                    },
                    {
                        "name": "results",
                        "type": "map[string]*model.SubmissionHistoryItem"
                    },
                    {
                        "name": "work-errors",
                        "type": "map[string]string"
                    }
                ]
            },
            "courses/assignments/submissions/proxy/resubmit": {
                "description": "Proxy resubmit an assignment submission to the autograder.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "proxy-email",
                        "type": "core.TargetCourseUser",
                        "required": true
                    },
                    {
                        "name": "proxy-time",
                        "type": "int64"
                    },
                    {
                        "name": "target-submission",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-submission",
                        "type": "bool"
                    },
                    {
                        "name": "found-user",
                        "type": "bool"
                    },
                    {
                        "name": "grading-success",
                        "type": "bool"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "rejected",
                        "type": "bool"
                    },
                    {
                        "name": "result",
                        "type": "*model.GradingInfo"
                    }
                ]
            },
            "courses/assignments/submissions/proxy/submit": {
                "description": "Proxy submit an assignment submission to the autograder.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "proxy-email",
                        "type": "core.TargetCourseUser",
                        "required": true
                    },
                    {
                        "name": "proxy-time",
                        "type": "int64"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-user",
                        "type": "bool"
                    },
                    {
                        "name": "grading-success",
                        "type": "bool"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "rejected",
                        "type": "bool"
                    },
                    {
                        "name": "result",
                        "type": "*model.GradingInfo"
                    }
                ]
            },
            "courses/assignments/submissions/remove": {
                "description": "Remove a specified submission. Defaults to the most recent submission.",
                "input": [
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUserSelfOrGrader"
                    },
                    {
                        "name": "target-submission",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-submission",
                        "type": "bool"
                    },
                    {
                        "name": "found-user",
                        "type": "bool"
                    }
                ]
            },
            "courses/assignments/submissions/submit": {
                "description": "Submit an assignment submission to the autograder.",
                "input": [
                    {
                        "name": "allow-late",
                        "type": "bool"
                    },
                    {
                        "name": "assignment-id",
                        "type": "string",
                        "description": "The ID of the assignment to make this request to.",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "grading-success",
                        "type": "bool"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "rejected",
                        "type": "bool"
                    },
                    {
                        "name": "result",
                        "type": "*model.GradingInfo"
                    }
                ]
            },
            "courses/lms/scores/upload": {
                "description": "Perform a full scoring and upload scores to the course's LMS.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "dry-run",
                        "type": "bool"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "dry-run",
                        "type": "bool"
                    },
                    {
                        "name": "results",
                        "type": "[]*model.ExternalScoringInfo"
                    }
                ]
            },
            "courses/stats/query": {
                "description": "Query metrics for a specific course.\nOnly the context course can be queried for, the target-course field will be ignored for this endpoint.",
                "input": [
                    {
                        "name": "after",
                        "type": "int64",
                        "description": "Only return data from after this time.\nA value of zero is treated normally here (as UNIX epoch)."
                    },
                    {
                        "name": "before",
                        "type": "int64",
                        "description": "Only return data from before this time.\nA value of zero is treated as the end of time."
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "description": "Limit the number of results.\nTake this number of results from the top.\nA non-positive number means no count limit will be applied."
                    },
                    {
                        "name": "sort",
                        "type": "int",
                        "description": "Define how the results should be sorted by time.\n-1 for ascending, 0 for no sorting, 1 for descending."
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Only return data of this type.\nThis field is required in the query to specify which kind of metric to return.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "where",
                        "type": "map[stats.MetricAttribute]any",
                        "description": "Filter results to only include metrics that match Metric attribute field values.\nKeys are field names (e.g., \"course\") and values are what to include (e.g., course101).\nThis filter is applied after all other Query conditions are applied."
                    }
                ],
                "output": [
                    {
                        "name": "results",
                        "type": "[]*stats.Metric"
                    }
                ]
            },
            "courses/upsert/filespec": {
                "description": "Upsert a course using a filespec.",
                "input": [
                    {
                        "name": "dry-run",
                        "type": "bool"
                    },
                    {
                        "name": "filespec",
                        "type": "util.FileSpec",
                        "required": true
                    },
                    {
                        "name": "skip-build-images",
                        "type": "bool"
                    },
                    {
                        "name": "skip-emails",
                        "type": "bool"
                    },
                    {
                        "name": "skip-lms-sync",
                        "type": "bool"
                    },
                    {
                        "name": "skip-source-sync",
                        "type": "bool"
                    },
                    {
                        "name": "skip-template-files",
                        "type": "bool"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "results",
                        "type": "[]courses.CourseUpsertResult"
                    }
                ]
            },
            "courses/upsert/zip": {
                "description": "Upsert a course using a zip file.",
                "input": [
                    {
                        "name": "dry-run",
                        "type": "bool"
                    },
                    {
                        "name": "skip-build-images",
                        "type": "bool"
                    },
                    {
                        "name": "skip-emails",
                        "type": "bool"
                    },
                    {
                        "name": "skip-lms-sync",
                        "type": "bool"
                    },
                    {
                        "name": "skip-source-sync",
                        "type": "bool"
                    },
                    {
                        "name": "skip-template-files",
                        "type": "bool"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "results",
                        "type": "[]courses.CourseUpsertResult"
                    }
                ]
            },
            "courses/users/drop": {
                "description": "Drop a user from the course.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUser",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-user",
                        "type": "bool"
                    }
                ]
            },
            "courses/users/enroll": {
                "description": "Enroll one or more users to the course.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Do not actually commit any changes or send any emails regardless of |SendEmails|."
                    },
                    {
                        "name": "raw-course-users",
                        "type": "[]*model.RawCourseUserData",
                        "required": true
                    },
                    {
                        "name": "send-emails",
                        "type": "bool",
                        "description": "Send any relevant email (usually about creation or password changing)."
                    },
                    {
                        "name": "skip-inserts",
                        "type": "bool"
                    },
                    {
                        "name": "skip-updates",
                        "type": "bool"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "results",
                        "type": "[]*model.ExternalUserOpResult"
                    }
                ]
            },
            "courses/users/get": {
                "description": "Get the information for a course user.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUserSelfOrGrader"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found",
                        "type": "bool"
                    },
                    {
                        "name": "user",
                        "type": "*core.CourseUserInfo"
                    }
                ]
            },
            "courses/users/list": {
                "description": "List the users in the course.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-users",
                        "type": "[]model.CourseUserReference"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "users",
                        "type": "[]*core.CourseUserInfo"
                    }
                ]
            },
            "lms/upload/scores": {
                "description": "Upload scores from a tab-separated file to the course's LMS.\nThe file should not have headers, and should have two columns: email and score.",
                "input": [
                    {
                        "name": "assignment-lms-id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "scores",
                        "type": "[]upload.ScoreEntry",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "count",
                        "type": "int"
                    },
                    {
                        "name": "error-count",
                        "type": "int"
                    },
                    {
                        "name": "no-lms-id-users",
                        "type": "[]upload.RowEntry"
                    },
                    {
                        "name": "unrecognized-users",
                        "type": "[]upload.RowEntry"
                    }
                ]
            },
            "lms/user/get": {
                "description": "Get information for an LMS user.",
                "input": [
                    {
                        "name": "course-id",
                        "type": "string",
                        "description": "The ID of the course to make this request to.",
                        "required": true
                    },
                    {
                        "name": "target-email",
                        "type": "core.TargetCourseUser",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-autograder-user",
                        "type": "bool"
                    },
                    {
                        "name": "found-lms-user",
                        "type": "bool"
                    },
                    {
                        "name": "user",
                        "type": "*core.CourseUserInfo"
                    }
                ]
            },
            "logs/query": {
                "description": "Query log entries from the autograder server.",
                "input": [
                    {
                        "name": "after",
                        "type": "string"
                    },
                    {
                        "name": "level",
                        "type": "string"
                    },
                    {
                        "name": "past",
                        "type": "string"
                    },
                    {
                        "name": "target-assignment",
                        "type": "string"
                    },
                    {
                        "name": "target-course",
                        "type": "string"
                    },
                    {
                        "name": "target-email",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "error",
                        "type": "*model.ExternalLocatableError"
                    },
                    {
                        "name": "results",
                        "type": "[]*log.Record"
                    },
                    {
                        "name": "success",
                        "type": "bool"
                    }
                ]
            },
            "metadata/describe": {
                "description": "Describe all endpoints on the server.",
                "input": [
                    {
                        "name": "force-compute",
                        "type": "bool"
                    }
                ],
                "output": [
                    {
                        "name": "endpoints",
                        "type": "map[string]core.EndpointDescription"
                    },
                    {
                        "name": "types",
                        "type": "map[string]core.TypeDescription"
                    }
                ]
            },
            "metadata/heartbeat": {
                "description": "Get server heartbeat.",
                "input": [],
                "output": [
                    {
                        "name": "server-version",
                        "type": "util.Version"
                    }
                ]
            },
            "stats/query": {
                "description": "Query stats for the server.",
                "input": [
                    {
                        "name": "after",
                        "type": "int64",
                        "description": "Only return data from after this time.\nA value of zero is treated normally here (as UNIX epoch)."
                    },
                    {
                        "name": "before",
                        "type": "int64",
                        "description": "Only return data from before this time.\nA value of zero is treated as the end of time."
                    },
                    {
                        "name": "limit",
                        "type": "int",
                        "description": "Limit the number of results.\nTake this number of results from the top.\nA non-positive number means no count limit will be applied."
                    },
                    {
                        "name": "sort",
                        "type": "int",
                        "description": "Define how the results should be sorted by time.\n-1 for ascending, 0 for no sorting, 1 for descending."
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Only return data of this type.\nThis field is required in the query to specify which kind of metric to return.",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "where",
                        "type": "map[stats.MetricAttribute]any",
                        "description": "Filter results to only include metrics that match Metric attribute field values.\nKeys are field names (e.g., \"course\") and values are what to include (e.g., course101).\nThis filter is applied after all other Query conditions are applied."
                    }
                ],
                "output": [
                    {
                        "name": "results",
                        "type": "[]*stats.Metric"
                    }
                ]
            },
            "system/stacks": {
                "description": "Get stack traces for all the currently running routines (threads) on the server.",
                "input": [
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "count",
                        "type": "int"
                    },
                    {
                        "name": "stacks",
                        "type": "[]*util.CallStack"
                    }
                ]
            },
            "users/auth": {
                "description": "Authenticate as a user.",
                "input": [
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "success",
                        "type": "bool"
                    }
                ]
            },
            "users/get": {
                "description": "Get the information for a server user.",
                "input": [
                    {
                        "name": "target-email",
                        "type": "core.TargetServerUserSelfOrAdmin"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "courses",
                        "type": "map[string]*core.CourseInfo"
                    },
                    {
                        "name": "found",
                        "type": "bool"
                    },
                    {
                        "name": "user",
                        "type": "*core.ServerUserInfo"
                    }
                ]
            },
            "users/list": {
                "description": "List the users on the server.",
                "input": [
                    {
                        "name": "target-users",
                        "type": "[]model.ServerUserReference"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "users",
                        "type": "[]*core.ServerUserInfo"
                    }
                ]
            },
            "users/password/change": {
                "description": "Change your password to the one provided.",
                "input": [
                    {
                        "name": "new-pass",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "duplicate",
                        "type": "bool"
                    },
                    {
                        "name": "success",
                        "type": "bool"
                    }
                ]
            },
            "users/password/reset": {
                "description": "Reset to a random password that will be emailed to you.",
                "input": [
                    {
                        "name": "user-email",
                        "type": "string",
                        "required": true
                    }
                ],
                "output": []
            },
            "users/remove": {
                "description": "Remove a user from the server.",
                "input": [
                    {
                        "name": "target-email",
                        "type": "core.TargetServerUser",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found-user",
                        "type": "bool"
                    }
                ]
            },
            "users/tokens/create": {
                "description": "Create a new authentication token.",
                "input": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "token-cleartext",
                        "type": "string"
                    },
                    {
                        "name": "token-id",
                        "type": "string"
                    }
                ]
            },
            "users/tokens/delete": {
                "description": "Delete an authentication token.",
                "input": [
                    {
                        "name": "token-id",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "found",
                        "type": "bool"
                    }
                ]
            },
            "users/upsert": {
                "description": "Upsert one or more users to the server (update if exists, insert otherwise).",
                "input": [
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Do not actually commit any changes or send any emails regardless of |SendEmails|."
                    },
                    {
                        "name": "raw-users",
                        "type": "[]*model.RawServerUserData",
                        "required": true
                    },
                    {
                        "name": "send-emails",
                        "type": "bool",
                        "description": "Send any relevant email (usually about creation or password changing)."
                    },
                    {
                        "name": "skip-inserts",
                        "type": "bool"
                    },
                    {
                        "name": "skip-updates",
                        "type": "bool"
                    },
                    {
                        "name": "user-email",
                        "type": "string",
                        "description": "The email of the user making this request.",
                        "required": true
                    },
                    {
                        "name": "user-pass",
                        "type": "string",
                        "description": "The password of the user making this request.",
                        "required": true
                    }
                ],
                "output": [
                    {
                        "name": "results",
                        "type": "[]*model.ExternalUserOpResult"
                    }
                ]
            }
        },
        "types": {
            "analysis.AnalysisOptions": {
                "category": "struct",
                "fields": [
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Don't save anything."
                    },
                    {
                        "name": "overwrite-records",
                        "type": "bool",
                        "description": "Remove any existing records before running the job."
                    },
                    {
                        "name": "submissions",
                        "type": "[]string",
                        "description": "The raw submission specifications to analyze."
                    },
                    {
                        "name": "wait-for-completion",
                        "type": "bool",
                        "description": "Wait for the entire job to complete and return all results."
                    }
                ]
            },
            "core.AssignmentInfo": {
                "category": "struct",
                "fields": [
                    {
                        "name": "due-date",
                        "type": "int64"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "max-points",
                        "type": "float64"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ]
            },
            "core.BaseFieldDescription": {
                "category": "struct",
                "fields": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    }
                ]
            },
            "core.CourseInfo": {
                "category": "struct",
                "fields": [
                    {
                        "name": "assignments",
                        "type": "map[string]*core.AssignmentInfo"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ]
            },
            "core.CourseUserInfo": {
                "category": "struct",
                "description": "An API-safe representation of a course user.\nEmbed the BaseUserInfo and use CourseUserInfoType as the type.",
                "fields": [
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "lms-id",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "role",
                        "type": "int"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    }
                ]
            },
            "core.EndpointDescription": {
                "category": "struct",
                "fields": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "input",
                        "type": "[]core.FieldDescription"
                    },
                    {
                        "name": "output",
                        "type": "[]core.BaseFieldDescription"
                    }
                ]
            },
            "core.EnrollmentInfo": {
                "category": "struct",
                "description": "An API-safe representation of enrollment information.",
                "fields": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "role",
                        "type": "int"
                    }
                ]
            },
            "core.FieldDescription": {
                "category": "struct",
                "fields": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "required",
                        "type": "bool"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    }
                ]
            },
            "core.NonEmptyString": {
                "category": "alias",
                "description": "The type for a named field that must have a non-empty string value.",
                "alias-type": "string"
            },
            "core.ServerUserInfo": {
                "category": "struct",
                "description": "An API-safe representation of a server user.\nEmbed the BaseUserInfo and use ServerUserInfoType as the type.",
                "fields": [
                    {
                        "name": "courses",
                        "type": "map[string]core.EnrollmentInfo"
                    },
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "role",
                        "type": "int"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    }
                ]
            },
            "core.TargetCourseUser": {
                "category": "struct",
                "description": "A request having a field of this type indicates that the request is targeting a specific course user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext."
            },
            "core.TargetCourseUserSelfOrGrader": {
                "category": "struct",
                "description": "Same as TargetServerUserSelfOrAdmin, but in the context of a course user and a grader context user.\nTherefore, the context user only has to be a grader in the context course (or the target user themself).\nWhen targeting yourself, the user can be a server admin (and will be escalated to course owner for the request).\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext.",
                "fields": [
                    {
                        "name": "TargetCourseUser",
                        "type": "core.TargetCourseUser"
                    }
                ]
            },
            "core.TargetServerUser": {
                "category": "struct",
                "description": "A request having a field of this type indicates that the request is targeting a specific server user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext."
            },
            "core.TargetServerUserSelfOrAdmin": {
                "category": "struct",
                "description": "A request having a field of this type indicates that the request is targeting a specific user.\nThis type serializes to/from a string.\nIf no user is specified, then the context user is the target.\nIf a user is specified, then the context user must be a server admin\n(any user can access their own resources, but higher permissions are required to access another user's resources).\nNo error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext.",
                "fields": [
                    {
                        "name": "TargetServerUser",
                        "type": "core.TargetServerUser"
                    }
                ]
            },
            "core.TypeDescription": {
                "category": "struct",
                "fields": [
                    {
                        "name": "alias-type",
                        "type": "string"
                    },
                    {
                        "name": "category",
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "element-type",
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "type": "[]core.BaseFieldDescription"
                    }
                ]
            },
            "core.UserInfoType": {
                "category": "alias",
                "alias-type": "string"
            },
            "courses.CourseUpsertResult": {
                "category": "struct",
                "fields": [
                    {
                        "name": "assignment-template-files",
                        "type": "map[string][]string"
                    },
                    {
                        "name": "built-assignment-images",
                        "type": "[]string"
                    },
                    {
                        "name": "course-id",
                        "type": "string"
                    },
                    {
                        "name": "created",
                        "type": "bool"
                    },
                    {
                        "name": "lms-sync-result",
                        "type": "*model.LMSSyncResult"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "success",
                        "type": "bool"
                    },
                    {
                        "name": "updated",
                        "type": "bool"
                    }
                ]
            },
            "grader.RegradeOptions": {
                "category": "struct",
                "fields": [
                    {
                        "name": "dry-run",
                        "type": "bool",
                        "description": "Don't save anything."
                    },
                    {
                        "name": "overwrite-records",
                        "type": "bool",
                        "description": "Remove any existing records before running the job."
                    },
                    {
                        "name": "regrade-cutoff",
                        "type": "int64",
                        "description": "Ensure every user has made a new submission after this time.\nIf nil, the current time will be used."
                    },
                    {
                        "name": "target-users",
                        "type": "[]model.CourseUserReference",
                        "description": "The raw course user references to regrade."
                    },
                    {
                        "name": "wait-for-completion",
                        "type": "bool",
                        "description": "Wait for the entire job to complete and return all results."
                    }
                ]
            },
            "log.LogLevel": {
                "category": "alias",
                "alias-type": "int32"
            },
            "log.Record": {
                "category": "struct",
                "fields": [
                    {
                        "name": "assignment",
                        "type": "string"
                    },
                    {
                        "name": "attributes",
                        "type": "map[string]any",
                        "description": "Additional Attributes"
                    },
                    {
                        "name": "course",
                        "type": "string",
                        "description": "Context Attributes"
                    },
                    {
                        "name": "error",
                        "type": "string"
                    },
                    {
                        "name": "level",
                        "type": "int32",
                        "description": "Core Attributes"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "user",
                        "type": "string"
                    }
                ]
            },
            "model.AnalysisFileInfo": {
                "category": "struct",
                "fields": [
                    {
                        "name": "filename",
                        "type": "string"
                    },
                    {
                        "name": "lines-of-code",
                        "type": "int"
                    },
                    {
                        "name": "original-filename",
                        "type": "string"
                    }
                ]
            },
            "model.AssignmentAnalysisOptions": {
                "category": "struct",
                "fields": [
                    {
                        "name": "exclude-patterns",
                        "type": "[]string"
                    },
                    {
                        "name": "include-patterns",
                        "type": "[]string"
                    },
                    {
                        "name": "template-file-ops",
                        "type": "[]*util.FileOperation"
                    },
                    {
                        "name": "template-files",
                        "type": "[]*util.FileSpec"
                    }
                ]
            },
            "model.AssignmentInfo": {
                "category": "struct",
                "fields": [
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "late-days-lms-id",
                        "type": "string"
                    },
                    {
                        "name": "late-days-lms-name",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ]
            },
            "model.AssignmentSyncResult": {
                "category": "struct",
                "fields": [
                    {
                        "name": "ambiguous-matches",
                        "type": "[]model.AssignmentInfo"
                    },
                    {
                        "name": "non-matched-assignments",
                        "type": "[]model.AssignmentInfo"
                    },
                    {
                        "name": "synced-assignments",
                        "type": "[]model.AssignmentInfo"
                    },
                    {
                        "name": "unchanged-assignments",
                        "type": "[]model.AssignmentInfo"
                    }
                ]
            },
            "model.CourseUserReference": {
                "category": "alias",
                "description": "Course user references can represent the following:\n- An email address.\n- A literal \"*\" (which includes all users in the course).\n- A course role (which will include all course users with that role).\n- Any of the above options preceded by a dash (\"-\") (which indicates that the user or group will NOT be included in the final results).",
                "alias-type": "string"
            },
            "model.CourseUserRole": {
                "category": "alias",
                "description": "Course user roles represent a user's role within a single course.",
                "alias-type": "int"
            },
            "model.ExternalLocatableError": {
                "category": "struct",
                "description": "A user safe version of locatable errors.\nAll LocatableErrors must be converted to ExternalLocatableErrors\nif it is to be given to a user.",
                "fields": [
                    {
                        "name": "locator",
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ]
            },
            "model.ExternalScoringInfo": {
                "category": "struct",
                "description": "A trimmed-down version of ScoringInfo meant for external usage.",
                "fields": [
                    {
                        "name": "assignment",
                        "type": "string"
                    },
                    {
                        "name": "raw-score",
                        "type": "float64"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    },
                    {
                        "name": "submission-id",
                        "type": "string"
                    },
                    {
                        "name": "submission-time",
                        "type": "int64"
                    },
                    {
                        "name": "upload-time",
                        "type": "int64"
                    },
                    {
                        "name": "user",
                        "type": "string"
                    }
                ]
            },
            "model.ExternalUserOpResult": {
                "category": "struct",
                "description": "A user safe representation of the UserOpResult struct.\nNotably all errors will be converted to responses and the cleartext password field is removed.\nFor descriptions of shared fields, see UserOpResult above.",
                "fields": [
                    {
                        "name": "added",
                        "type": "bool",
                        "description": "The user was added to the server."
                    },
                    {
                        "name": "communication-error",
                        "type": "*model.ExternalLocatableError",
                        "description": "A user safe representation of a communication error."
                    },
                    {
                        "name": "dropped",
                        "type": "[]string",
                        "description": "The user was removed from the following courses (by id)."
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "description": "The email/id of the target user."
                    },
                    {
                        "name": "emailed",
                        "type": "bool",
                        "description": "The user was emailed during the course of this operation.\nThis is more than just GetEmail() was called, an actual email was sent\n(or would have been sent if this operation was during a dry-run)."
                    },
                    {
                        "name": "enrolled",
                        "type": "[]string",
                        "description": "The user was enrolled in the following courses (by id)."
                    },
                    {
                        "name": "modified",
                        "type": "bool",
                        "description": "The user existed before this operation and was edited (including enrollment changes)."
                    },
                    {
                        "name": "not-exists",
                        "type": "bool",
                        "description": "The user did not exist before this operation and does not exist after.\nThis may also be an error depending on the semantics of the operation."
                    },
                    {
                        "name": "removed",
                        "type": "bool",
                        "description": "The user existed before this operation and was removed."
                    },
                    {
                        "name": "skipped",
                        "type": "bool",
                        "description": "The user was skipped (often because they already exist)."
                    },
                    {
                        "name": "system-error",
                        "type": "*model.ExternalLocatableError",
                        "description": "A user safe representation of a system error."
                    },
                    {
                        "name": "validation-error",
                        "type": "*model.ExternalLocatableError",
                        "description": "A user safe representation of a validation error, which will not include a locator."
                    }
                ]
            },
            "model.FileSimilarity": {
                "category": "struct",
                "fields": [
                    {
                        "name": "filename",
                        "type": "string"
                    },
                    {
                        "name": "options",
                        "type": "map[string]any"
                    },
                    {
                        "name": "original-filename",
                        "type": "string"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    },
                    {
                        "name": "tool",
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "type": "string"
                    }
                ]
            },
            "model.GradedQuestion": {
                "category": "struct",
                "fields": [
                    {
                        "name": "grading_end_time",
                        "type": "int64"
                    },
                    {
                        "name": "grading_start_time",
                        "type": "int64"
                    },
                    {
                        "name": "hard_fail",
                        "type": "bool"
                    },
                    {
                        "name": "max_points",
                        "type": "float64"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    },
                    {
                        "name": "skipped",
                        "type": "bool"
                    }
                ]
            },
            "model.GradingInfo": {
                "category": "struct",
                "fields": [
                    {
                        "name": "additional-info",
                        "type": "map[string]any"
                    },
                    {
                        "name": "assignment-id",
                        "type": "string"
                    },
                    {
                        "name": "course-id",
                        "type": "string"
                    },
                    {
                        "name": "epilogue",
                        "type": "string"
                    },
                    {
                        "name": "grading_end_time",
                        "type": "int64"
                    },
                    {
                        "name": "grading_start_time",
                        "type": "int64"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "max_points",
                        "type": "float64"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "prologue",
                        "type": "string"
                    },
                    {
                        "name": "proxy-user",
                        "type": "string"
                    },
                    {
                        "name": "proxy_end_time",
                        "type": "int64"
                    },
                    {
                        "name": "proxy_start_time",
                        "type": "int64"
                    },
                    {
                        "name": "questions",
                        "type": "[]*model.GradedQuestion"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    },
                    {
                        "name": "short-id",
                        "type": "string"
                    },
                    {
                        "name": "user",
                        "type": "string"
                    }
                ]
            },
            "model.GradingResult": {
                "category": "struct",
                "fields": [
                    {
                        "name": "info",
                        "type": "*model.GradingInfo"
                    },
                    {
                        "name": "input-files-gzip",
                        "type": "map[string][]uint8"
                    },
                    {
                        "name": "output-files-gzip",
                        "type": "map[string][]uint8"
                    },
                    {
                        "name": "stderr",
                        "type": "string"
                    },
                    {
                        "name": "stdout",
                        "type": "string"
                    }
                ]
            },
            "model.IndividualAnalysis": {
                "category": "struct",
                "fields": [
                    {
                        "name": "analysis-timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "assignment-id",
                        "type": "string"
                    },
                    {
                        "name": "course-id",
                        "type": "string"
                    },
                    {
                        "name": "failure",
                        "type": "bool"
                    },
                    {
                        "name": "failure-message",
                        "type": "string"
                    },
                    {
                        "name": "files",
                        "type": "[]model.AnalysisFileInfo"
                    },
                    {
                        "name": "lines-of-code",
                        "type": "int"
                    },
                    {
                        "name": "lines-of-code-delta",
                        "type": "int"
                    },
                    {
                        "name": "lines-of-code-per-hour",
                        "type": "float64"
                    },
                    {
                        "name": "options",
                        "type": "*model.AssignmentAnalysisOptions"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    },
                    {
                        "name": "score-delta",
                        "type": "float64"
                    },
                    {
                        "name": "score-per-hour",
                        "type": "float64"
                    },
                    {
                        "name": "short-id",
                        "type": "string"
                    },
                    {
                        "name": "skipped-files",
                        "type": "[]string"
                    },
                    {
                        "name": "submission-id",
                        "type": "string"
                    },
                    {
                        "name": "submission-start-time",
                        "type": "int64"
                    },
                    {
                        "name": "submission-time-delta",
                        "type": "int64"
                    },
                    {
                        "name": "user-email",
                        "type": "string"
                    }
                ]
            },
            "model.IndividualAnalysisSummary": {
                "category": "struct",
                "fields": [
                    {
                        "name": "aggregate-lines-of-code",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "aggregate-lines-of-code-delta",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "aggregate-lines-of-code-per-file",
                        "type": "map[string]util.AggregateValues"
                    },
                    {
                        "name": "aggregate-lines-of-code-per-hour",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "aggregate-score",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "aggregate-score-delta",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "aggregate-score-per-hour",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "aggregate-submission-time-delta",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "complete",
                        "type": "bool"
                    },
                    {
                        "name": "complete-count",
                        "type": "int"
                    },
                    {
                        "name": "error-count",
                        "type": "int"
                    },
                    {
                        "name": "failure-count",
                        "type": "int"
                    },
                    {
                        "name": "first-timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "last-timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "pending-count",
                        "type": "int"
                    }
                ]
            },
            "model.LMSSyncResult": {
                "category": "struct",
                "fields": [
                    {
                        "name": "assignment-sync",
                        "type": "*model.AssignmentSyncResult"
                    },
                    {
                        "name": "user-sync",
                        "type": "[]*model.UserOpResult"
                    }
                ]
            },
            "model.LocatableError": {
                "category": "struct",
                "description": "A general representation of errors that have a definite source location."
            },
            "model.PairwiseAnalysis": {
                "category": "struct",
                "fields": [
                    {
                        "name": "analysis-timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "failure",
                        "type": "bool"
                    },
                    {
                        "name": "failure-message",
                        "type": "string"
                    },
                    {
                        "name": "mean-similarities",
                        "type": "map[string]float64"
                    },
                    {
                        "name": "options",
                        "type": "*model.AssignmentAnalysisOptions"
                    },
                    {
                        "name": "similarities",
                        "type": "map[string][]*model.FileSimilarity"
                    },
                    {
                        "name": "skipped-files",
                        "type": "[]string"
                    },
                    {
                        "name": "submission-ids",
                        "type": "model.PairwiseKey"
                    },
                    {
                        "name": "total-mean-similarity",
                        "type": "float64"
                    },
                    {
                        "name": "unmatched-files",
                        "type": "[][]string"
                    }
                ]
            },
            "model.PairwiseAnalysisSummary": {
                "category": "struct",
                "fields": [
                    {
                        "name": "aggregate-mean-similarities",
                        "type": "map[string]util.AggregateValues"
                    },
                    {
                        "name": "aggregate-total-mean-similarity",
                        "type": "util.AggregateValues"
                    },
                    {
                        "name": "complete",
                        "type": "bool"
                    },
                    {
                        "name": "complete-count",
                        "type": "int"
                    },
                    {
                        "name": "error-count",
                        "type": "int"
                    },
                    {
                        "name": "failure-count",
                        "type": "int"
                    },
                    {
                        "name": "first-timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "last-timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "pending-count",
                        "type": "int"
                    }
                ]
            },
            "model.PairwiseKey": {
                "category": "array",
                "description": "A key for pairwise analysis.\nShould always be an ordered (lexicographically) pair of full submissions IDs.",
                "element-type": "string"
            },
            "model.RawCourseUserData": {
                "category": "struct",
                "description": "Raw/dirty data for a course user.\nThis struct is used for raw data coming from a single course.",
                "fields": [
                    {
                        "name": "course-lms-id",
                        "type": "string"
                    },
                    {
                        "name": "course-role",
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ]
            },
            "model.RawServerUserData": {
                "category": "struct",
                "description": "Raw/dirty data for a user.\nThis struct can be directly embedded for Kong arguments.",
                "fields": [
                    {
                        "name": "course",
                        "type": "string"
                    },
                    {
                        "name": "course-lms-id",
                        "type": "string"
                    },
                    {
                        "name": "course-role",
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "pass",
                        "type": "string"
                    },
                    {
                        "name": "role",
                        "type": "string"
                    }
                ]
            },
            "model.ServerUserReference": {
                "category": "alias",
                "description": "Server user references can represent the following:\n- An email address.\n- A literal \"*\" (which includes all users on the server).\n- A server role (which will include all server users with that role).\n- \u003ccourse-id\u003e::\u003ccourse-role\u003e (which will include all users in the target course with that role).\n- *::\u003ccourse-role\u003e (which will include all users with the course role in any course).\n- \u003ccourse-id\u003e::* (which will include all users in the target course).\n- *::* (which includes all users enrolled in at least one course).\n- Any of the above options preceded by a dash (\"-\") (which indicates that the user or group will NOT be included in the final results).",
                "alias-type": "string"
            },
            "model.ServerUserRole": {
                "category": "alias",
                "description": "Server user roles represent a user's role within an autograder server instance.",
                "alias-type": "int"
            },
            "model.SubmissionHistoryItem": {
                "category": "struct",
                "fields": [
                    {
                        "name": "assignment-id",
                        "type": "string"
                    },
                    {
                        "name": "course-id",
                        "type": "string"
                    },
                    {
                        "name": "grading_start_time",
                        "type": "int64"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "max_points",
                        "type": "float64"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    },
                    {
                        "name": "short-id",
                        "type": "string"
                    },
                    {
                        "name": "user",
                        "type": "string"
                    }
                ]
            },
            "model.UserOpResult": {
                "category": "struct",
                "description": "A general representation of the result of operations that modify a user in any way (add, remove, enroll, drop, etc).\nAll user-facing functions (essentially non-db functions) should return an instance or collection of these objects.",
                "fields": [
                    {
                        "name": "added",
                        "type": "bool",
                        "description": "The user was added to the server."
                    },
                    {
                        "name": "cleartext-password",
                        "type": "string",
                        "description": "The following cleartext password was generated during this operation.\nCare should be taken to not expose this field."
                    },
                    {
                        "name": "communication-error",
                        "type": "*model.LocatableError",
                        "description": "The following error occurred during this operation, but not because of the provided data,\ni.e., the system was unable to communicate the results.\nThese errors are not guaranteed to be safe for users,\nand the calling code should decide how they should be managed."
                    },
                    {
                        "name": "dropped",
                        "type": "[]string",
                        "description": "The user was removed from the following courses (by id)."
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "description": "The email/id of the target user."
                    },
                    {
                        "name": "emailed",
                        "type": "bool",
                        "description": "The user was emailed during the course of this operation.\nThis is more than just GetEmail() was called, an actual email was sent\n(or would have been sent if this operation was during a dry-run)."
                    },
                    {
                        "name": "enrolled",
                        "type": "[]string",
                        "description": "The user was enrolled in the following courses (by id)."
                    },
                    {
                        "name": "modified",
                        "type": "bool",
                        "description": "The user existed before this operation and was edited (including enrollment changes)."
                    },
                    {
                        "name": "not-exists",
                        "type": "bool",
                        "description": "The user did not exist before this operation and does not exist after.\nThis may also be an error depending on the semantics of the operation."
                    },
                    {
                        "name": "removed",
                        "type": "bool",
                        "description": "The user existed before this operation and was removed."
                    },
                    {
                        "name": "skipped",
                        "type": "bool",
                        "description": "The user was skipped (often because they already exist)."
                    },
                    {
                        "name": "system-error",
                        "type": "*model.LocatableError",
                        "description": "The following error occurred during this operation, but not because of the provided data,\ni.e., they are the system's fault.\nThese errors are not guaranteed to be safe for users,\nand the calling code should decide how they should be managed."
                    },
                    {
                        "name": "validation-error",
                        "type": "*model.LocatableError",
                        "description": "The following error occurred during this operation because of the provided data,\ni.e., they are caused by the calling user.\nAll error messages should be safe for users."
                    }
                ]
            },
            "stats.Metric": {
                "category": "struct",
                "fields": [
                    {
                        "name": "attributes",
                        "type": "map[stats.MetricAttribute]any",
                        "description": "Additional attributes that are not standard enough to be formalized in fields."
                    },
                    {
                        "name": "timestamp",
                        "type": "int64"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "float64"
                    }
                ]
            },
            "stats.MetricAttribute": {
                "category": "alias",
                "alias-type": "string"
            },
            "stats.MetricType": {
                "category": "alias",
                "alias-type": "string"
            },
            "timestamp.Timestamp": {
                "category": "alias",
                "description": "A safe (always valid) time representation.\nA timestamp is the number of milliseconds (int64) since the UNIX epoch (which is in UTC).",
                "alias-type": "int64"
            },
            "upload.RowEntry": {
                "category": "struct",
                "fields": [
                    {
                        "name": "entry",
                        "type": "interface {}"
                    },
                    {
                        "name": "row",
                        "type": "int"
                    }
                ]
            },
            "upload.ScoreEntry": {
                "category": "struct",
                "fields": [
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "score",
                        "type": "float64"
                    }
                ]
            },
            "util.AggregateValues": {
                "category": "struct",
                "fields": [
                    {
                        "name": "count",
                        "type": "int"
                    },
                    {
                        "name": "max",
                        "type": "float64"
                    },
                    {
                        "name": "mean",
                        "type": "float64"
                    },
                    {
                        "name": "median",
                        "type": "float64"
                    },
                    {
                        "name": "min",
                        "type": "float64"
                    }
                ]
            },
            "util.CallStack": {
                "category": "struct",
                "fields": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "records",
                        "type": "[]util.CallStackRecord"
                    },
                    {
                        "name": "status",
                        "type": "string"
                    }
                ]
            },
            "util.CallStackRecord": {
                "category": "struct",
                "fields": [
                    {
                        "name": "call",
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "name": "line",
                        "type": "int"
                    },
                    {
                        "name": "pointer",
                        "type": "string"
                    }
                ]
            },
            "util.FileOperation": {
                "category": "array",
                "description": "File operations represent simple file operations.\nAny represented file paths must be POSIX, relative, and not point to any parent directories.\nNote that this code will only work properly on POSIX systems because of the lexical analysis on paths.",
                "element-type": "string"
            },
            "util.FileSpec": {
                "category": "struct",
                "fields": [
                    {
                        "name": "dest",
                        "type": "string"
                    },
                    {
                        "name": "path",
                        "type": "string"
                    },
                    {
                        "name": "reference",
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "type": "string"
                    }
                ]
            },
            "util.FileSpecType": {
                "category": "alias",
                "alias-type": "string"
            },
            "util.Version": {
                "category": "struct",
                "fields": [
                    {
                        "name": "base-version",
                        "type": "string"
                    },
                    {
                        "name": "git-hash",
                        "type": "string"
                    },
                    {
                        "name": "is-dirty",
                        "type": "bool"
                    }
                ]
            }
        }
    }
}
